### 
# base_retrainer schema
# Configured to retrain a model on a poisoned test dataset.
# Inputs the .npy binary poison mask dictating which datapoints are poison and which are not.
# Outputs the .pth of a retrained model.
###

# NOTE: INTERNAL blocks should not be replicated in experiments!
[INTERNAL]
module_name = "base_trainer"  # Uses the base_trainer module

[base_retrainer]
input = "string: Path to a binary poison mask on CIFAR data generated by a defense."
output = "string: Path to .pth file."
model = "string: (r18 / r32 / l1 / l5). For ResNet-18, ResNet-32, LeNet-1, or LeNet-5"
dataset = "string: (cifar / mnist / fmnist). For CIFAR-10 and MNIST / Fashion-MNIST datasets"
trainer = "string: (sgd / ranger). Specifies optimizer. "
source_label = "int: {0,1,...,9}. Specifies label to mimic"
target_label = "int: {0,1,...,9}. Specifies label to attack"
poisoner = "string: Form: {{1,2,3,9}xp, {1,2}xs, {1,4}xl}. Integer resembles number of attacks and string represents type"
poisons = "int: {0,1,...,infty}. Specifies number of poisons to generate"

[OPTIONAL]
batch_size = "int: {0,1,...,infty}. Specifies batch size. Set to default for trainer if omitted."
epochs = "int: {0,1,...,infty}. Specifies number of epochs. Set to default for trainer if omitted."
optim_kwargs = "dict. Optional keywords for Pytorch SGD / Ranger optimizer. See sever example."
scheduler_kwargs = "dict. Optional keywords for Pytorch learning rate optimizer (with SGD). See sever example."
variant = "string: Form: {model}_{hyperparam string}. Represents .npy file to consume from data/ when doing label consistent"
reduce_amplitude = "float: {[0, 1], -1.0}. Specifies amplitude reduction for label consistent. -1.0 if none"